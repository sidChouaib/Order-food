import 'package:flutter/material.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: const TextStyle(
          color: Color(0XFF1E1D1D),
          fontSize: 16,
          fontFamily: 'Sen',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray600,
          fontSize: 13,
          fontFamily: 'Sen',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray90002,
          fontSize: 20,
          fontFamily: 'Sen',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 16,
          fontFamily: 'Sen',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray90002,
          fontSize: 15,
          fontFamily: 'Sen',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // BlueGray
  Color get blueGray => const Color.fromARGB(78, 236, 240, 244);
  Color get blueGray50 => const Color(0XFFECF0F4);
  Color get blueGray300 => const Color(0XFFA0A5BA);
  Color get blueGray600 => const Color(0XFF646982);
  Color get blueGray900 => const Color(0XFF333333);
  Color get blueGray90001 => const Color(0XFF32343E);
  Color get blueGray90002 => const Color(0XFF31343D);

  // Gray
  Color get gray50026 => const Color(0X2696969A); // Shadow color -- Gray
  Color get gray700 => const Color(0XFF676767);
  Color get gra58y900 => const Color(0XFF1E1D1D);
  Color get gray90001 => const Color(0XFF181C2E);

  // LightBlue
  Color get lightBlue400 => const Color(0XFF1DC1F5);
  Color get lightBlue => const Color.fromARGB(132, 29, 195, 245);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);

  //

  //
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
